import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.JsonObject

plugins {
	id 'java'
	id 'maven-publish'
	// TODO: Shadow plugin

	id 'idea'
	id 'eclipse'
	id("fabric-loom") version "0.2.7-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader"

// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'SpongePowered'
		url = 'http://repo.spongepowered.org/maven'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
}

dependencies {
	// TODO: Stop depending on Minecraft in main build.gradle
	minecraft "com.mojang:minecraft:1.14.4"
	mappings "net.fabricmc:yarn:1.14.4+build.1"

	// TODO: Jetbrains annotations
	// Minecraft's JAR uses these annotations
	compile 'com.google.code.findbugs:jsr305:3.0.2'

	// fabric-loader dependencies
	compile 'org.ow2.asm:asm:8.0'
	compile 'org.ow2.asm:asm-analysis:8.0'
	compile 'org.ow2.asm:asm-commons:8.0'
	compile 'org.ow2.asm:asm-tree:8.0'
	compile 'org.ow2.asm:asm-util:8.0'

	compile('net.fabricmc:sponge-mixin:0.8.1+build.21') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	compile 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	compile 'net.fabricmc:tiny-remapper:0.2.2.64'

	compile 'com.google.jimfs:jimfs:1.2-fabric'
	compile 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// Json parser for mod metadata; internal
	compile 'com.grack:nanojson:1.6'

	// launchwrapper + dependencies
	compile ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}
	compile 'net.sf.jopt-simple:jopt-simple:5.0.3'

	// Unit testing
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", version

	from(sourceSets.main.resources.srcDirs) {
		include 'fabric.mod.json'
		expand 'version':version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'fabric.mod.json'
	}
}

jar {
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
		)
	}
}

task copyJson(type: Copy, dependsOn: ["remapJar"]) {
	from('src/main/resources/fabric-installer.json') {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into 'build/libs'
}

task copyJsonLw(type: Copy, dependsOn: ["remapJar"]) {
	from('src/main/resources/fabric-installer.launchwrapper.json') {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into 'build/libs'
}

tasks.build.dependsOn "copyJson"
tasks.build.dependsOn "copyJsonLw"

String getClasspathEntries(){
	String classPath = ""
	File installerFile = file("src/main/resources/fabric-installer.json")
	JsonObject object = Gson.newInstance().fromJson(new InputStreamReader(new FileInputStream(installerFile)), JsonObject.class)

	["common", "server"].forEach { l ->
		for (JsonElement element : object.getAsJsonObject("libraries").getAsJsonArray(l)) {
			String dep = element.getAsJsonObject().get("name").getAsString()
			String[] depSplit = dep.split(":")
			if (depSplit.length != 3) throw new RuntimeException("Invalid dependency " + dep);
			classPath = classPath + " libs/" + depSplit[1] + "-" + depSplit[2] + ".jar"
		}
	}

	return classPath;
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = 'javadoc'
}
build.dependsOn javadocJar

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact javadocJar
			artifact(file('src/main/resources/fabric-installer.json')) {
				builtBy remapJar
			}
			artifact(file('src/main/resources/fabric-installer.launchwrapper.json')) {
				builtBy remapJar
				classifier = "launchwrapper"
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (project.hasProperty('mavenPass')) {
			maven {
				url = "http://mavenupload.modmuss50.me/"
				credentials {
					username = "buildslave"
					password = project.getProperty('mavenPass')
				}
			}
		}
	}
}
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'
